<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何用VS Code优雅的在容器中开发</title>
      <link href="/code-in-docker/"/>
      <url>/code-in-docker/</url>
      
        <content type="html"><![CDATA[<p>最近干了不少零碎事，写论文，搭博客，填表爬虫。<s>为了优雅</s>，这些杂七乱八的活用到的开发环境自然要容器化，既能互相隔离，又方便一言不合开新容器从头再来。</p><a id="more"></a><p>根据 Dockerfile 构建包含开发环境的镜像，利用 VS Code 的 Remote - Container 插件创建容器、挂载源码目录并在容器内安装 VS Code Server，实现用容器内的开发环境处理本地的代码。</p><p><img src="/images/architecture-containers.png" alt="architecture-containers"></p><p>👆就是这么个意思。</p><p>首先在<strong>源码目录</strong>内新建一个 <code>.devcontainer</code> 文件夹，里面放一个 <code>Dockerfile</code> 和一个 <code>devcontaniner.json</code> 。根据源码内容配置文件内容，以我写论文的 TeX Live 环境为例</p><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add texlive-full libstdc++ git</span></span><br></pre></td></tr></table></figure><p>其中git和libstdc++是为 VS Code 准备的。</p><p><code>devcontainer.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"TeX Live"</span>,</span><br><span class="line">  <span class="attr">"dockerFile"</span>: <span class="string">"Dockerfile"</span>,</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"terminal.integrated.shell.linux"</span>: <span class="string">"/bin/ash"</span></span><br><span class="line">    <span class="comment">//settings.json里的其他配置， 太长不写</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extensions"</span>: [james-yu.latex-workshop], <span class="comment">// 插件标识</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="noopener">Remote - Container</a> 插件，点击左下角绿色图标，在弹出对话框中选择 “ Remote-Containers: Open Folder in Container …” 选项，打开刚才搞的<strong>源码目录</strong>，VS Code 就会自动构建镜像、新建容器并进行初始化配置，自动化程度很高。</p><p>默认情况下，VS Code 将在新容器的文件系统内安装 VS Code Server 和插件，如果经常需要开新容器，如<strong>重建镜像</strong>或<strong>使用同一镜像打开不同文件夹</strong>，则可以将其在数据卷（volume）中，并在每次创建新容器时挂载，虽然会降低性能，但可节约时间。</p><p>在 <code>devcontainer.json</code> 中添加以下部分：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"mounts": [</span><br><span class="line">    <span class="comment">// 二选一</span></span><br><span class="line">    <span class="comment">// 仅保留插件</span></span><br><span class="line">    "source=unique-vol-name-here,target=/root/.vscode-server/extensions,type=volume",</span><br><span class="line">    <span class="comment">// 保留插件和VS Code Server</span></span><br><span class="line">    "source=unique-vol-name-here,target=/root/.vscode-server,type=volume",</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果想重新安装 VS Code Server和插件，删掉容器卷即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm unique-vol-name-here</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="noopener">Developing inside a Container</a><br><a href="https://code.visualstudio.com/docs/remote/containers-advanced" target="_blank" rel="noopener">Advanced Container Configuration</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于这个博客的搭建</title>
      <link href="/about-building-this-site/"/>
      <url>/about-building-this-site/</url>
      
        <content type="html"><![CDATA[<p>目前站名叫 Fizzy - Logbook，打算用来记录一些折腾过程中的闲散杂事。</p><p>这是我在这里写的第一篇博客，我决定记录一下它是怎么来的。</p><a id="more"></a><p>简单来说，Fizzy - Logbook 由 Hexo 搭建，托管于GitHub ，使用 Travis CI 自动构建。</p><pre class="mermaid">graph LR  R(GitHub Repo)  T(Travis CI)  P(GitHub Pages)  R --push?--> T  T --hexo g & hexo d-->P</pre><h2 id="Hexo">Hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个基于 Node.js 的开源博客框架，快速、简洁且高效。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">13</span>-alpine</span><br><span class="line"> </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache git python &amp;&amp; \</span></span><br><span class="line"><span class="bash">    npm install -g cnpm --registry=https://registry.npm.taobao.org &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cnpm install hexo-cli -g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /blog</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4000</span></span><br></pre></td></tr></table></figure><p>执行 <code>docker image build -t hexo:base .</code> 构建基础镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> hexo:base</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure><p>执行 <code>docker image build -t hexo:init .</code> 构建镜像</p><p>执行 <code> docker container run --rm -it -p 4000:4000 hexo:init ash</code> 创建容器。</p><p>用 <code>hexo s</code> 命令启动 server，在浏览器访问 <code>localhost:4000</code> 查看网站效果。</p><p>此时可以对源码根目录下的 <code>_config.yml</code> 进行编辑，对网站进行初步的定制，也可寻找中意的主题替换初始主题。随时用 <code>hexo s</code> 观看效果，如果不知道哪搞坏了，重建一个容器重新弄就好。</p><p><s>Fizzy - Logbook 使用了 <a href="https://github.com/frostfan/hexo-theme-polarbear" target="_blank" rel="noopener">polorbear 主题</a>。<a href="https://github.com/fizzybreezy/fizzybreezy.github.io/commit/4a3b239b5545a61c1892f95867dbcb82f8e1300f" target="_blank" rel="noopener">调整了文章链接格式</a>并<a href="https://github.com/fizzybreezy/fizzybreezy.github.io/commit/bf5316c286c1acb2feb8b8069ebf0431eb2cb5b4" target="_blank" rel="noopener">启用了分类边栏</a>。</s></p><p><s>值得注意的是，该主题（包括其他一些主题）需要安装包 <code>hexo-render-sass</code>，该包的依赖 <code>node-sass</code> 在安装过程中下载一个二进制文件，由于墙内网络原因下载经常失败，<a href="https://github.com/lmk123/blog/issues/28" target="_blank" rel="noopener">解决方案</a>在此。</s></p><p>Fizzy - Logbook 使用了 <a href="https://unnamed42.github.io/" target="_blank" rel="noopener">unnamed42</a> 修改的 <a href="https://github.com/unnamed42/hexo-theme-kunkka" target="_blank" rel="noopener">kunkka</a>主题，该主题包含了目录和搜索功能，稍加配置即可达到很棒的效果。感谢 unnamed42 和 原作者 <a href="https://mufeng.me/" target="_blank" rel="noopener">iMuFeng</a> 的工作。</p><h2 id="GitHub-Pages">GitHub Pages</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取网站源码，通过构建过程运行文件，然后发布网站。</p><p>首先在 GitHub 建立一个名为 <a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a> 的仓库，其中 username 是自己的用户名。</p><p>然后将上一步的博客源码推入仓库的 hexo 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /blog</span><br><span class="line">git init</span><br><span class="line">git checkout -b hexo</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">'first commit'</span></span><br><span class="line">git remote add origin https://github.com/username/username.github.io</span><br><span class="line">git push -u origin hexo</span><br></pre></td></tr></table></figure><p>在 <code>.gitignore</code> 中加入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node_modules&#x2F;</span><br><span class="line">tmp&#x2F;</span><br><span class="line">*.log</span><br><span class="line">.idea&#x2F;</span><br><span class="line">yarn.lock</span><br><span class="line">package-lock.json</span><br><span class="line">.nyc_output&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Travis-CI">Travis CI</h2><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>提供持续集成服务（Continuous Integration, CI），通过绑定 GitHub仓库，在每次代码发生变动时提供环境进行构建和测试。</p><p>在这里，每当博客的源码发生变动（调整页面、写新post）时，Travis CI 会根据配置文件 <code>.travis.yml</code> 自动生成、部署网页。</p><p>使用Travis CI 自动部署 GitHub Pages，需要通过 token 使其拥有对仓库的推送权限。在 GitHub 的 Settings / Developer Settings / Personal Access Tokens 页面中新建 token，赋予 repo 的全部权限即可。注意保护生成的token。</p><h3 id="配置-Travis-CI-服务">配置 Travis CI 服务</h3><p>接下来使用 GitHub 账户登录 Travis CI，进行以下几步操作：</p><ol><li><p>打开博客源码仓库的同步开关</p></li><li><p>在设置中关闭 “Build pushed pull requests”</p></li><li><p>加入变量 “GH_TOKEN&quot;，值为之前生成的token，注意关闭 ”DISPLAY VALUE IN BUILD LOG“ 选项。</p></li></ol><p>至此 Travis CI 服务配置完毕。</p><h3 id="配置自动构建">配置自动构建</h3><p>回到博客源码目录，</p><p>创建 <code>.travis.yml</code> ，加入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">--lts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"fizzybreezy"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"shenxingjian@live.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/gh_token/$&#123;GH_TOKEN&#125;/g"</span> <span class="string">./_config.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>这个文件定义了自动构建的流程，使用时注意替换 git 的参数。</p><p>在配置文件 <code>_config.yml</code> 中加入以下部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gh_token@github.com/fizzybreezy/fizzybreezy.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这部分定义了自动构建时 <code>hexo deploy</code> 命令的执行方式，其中的 gh_token 部分会在编译时会被 sed 替换为访问GitHub仓库的 token 。</p><h3 id="触发第一次构建">触发第一次构建</h3><p>将以上修改 <code>git push</code> ，即可触发 Travis CI 的自动构建，不出错的话，master 分支会出现自动部署的源码，此时博客也可以通过 <code>username.github.io</code> 访问了。</p><h2 id="对博客进行修改">对博客进行修改</h2><p>现在博客已经上线，发布新文章只需三步：</p><ol><li><code>git pull</code></li><li>用Markdown进行编写</li><li><code>git push</code></li></ol><p>如果要对博客的主题、样式等进行修改，需要用到 Hexo 环境。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> hexo:base</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> -b hexo https://github.com/fizzybreezy/fizzybreezy.github.io /blog &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cnpm install &amp;&amp; \</span></span><br><span class="line"><span class="bash">    hexo clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4000</span></span><br></pre></td></tr></table></figure><p>对修改后的博客源码 <code>git push</code> 即可。</p><h2 id="参考">参考</h2><p><a href="https://juejin.im/post/5a1fa30c6fb9a045263b5d2a" target="_blank" rel="noopener">Hexo遇上Travis-CI：可能是最通俗易懂的自动发布博客图文教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Travis CI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
